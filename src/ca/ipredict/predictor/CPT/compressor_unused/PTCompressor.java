package ca.ipredict.predictor.CPT.compressor_unused;

import java.util.Map;

import ca.ipredict.predictor.CPT.Bitvector;
import ca.ipredict.predictor.CPT.PredictionTree;

/**
 * The purpose of this compressor is to compress the Prediction Tree
 * generated by the CPT predictor so save in spatial size while not
 * reducing or enhancing the following performances measures: accuracy,
 * and testing time. 
 * 
 * The training time has to be impacted negatively by the compression
 * of the Prediction Tree
 * @author Root
 *
 */
public class PTCompressor {

	
	
	public static void compress(PredictionTree PT, Map<Integer, PredictionTree> LT, Map<Integer, Bitvector> II) {
		
		
		pathCollapse(PT, LT, II);
		
	}
	
	
	
	public static void pathCollapse(PredictionTree PT, Map<Integer, PredictionTree> LT, Map<Integer, Bitvector> II) {
		
	
		
		
		
	}
	
	
	public static int pathCollapseHelper(PredictionTree PT, Map<Integer, PredictionTree> LT, Map<Integer, Bitvector> II) {
		
		int leafs = 0;
		for(PredictionTree child : PT.getChildren()) {
			leafs += pathCollapseHelper(PT, LT, II);
		}
		
		if(leafs == 1) {
			
			//remove PT.getChildren
			
			//update LT 
			
			//update II
			
		}
		//nothing to do since this PT does not have childs
		else if(leafs == 0) {
			leafs = 1;
		}
		//this PT as too many leafs under
		else {}
		
		return leafs;
	}
	
	
}
